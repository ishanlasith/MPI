#include <stdio.h>
#include <mpi.h>

int main(int argc, char** argv) {
    int rank, size;
    double num1, num2;
    char operation;
    double result;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        
        printf("Enter two numbers: ");
        fflush(stdout);
        scanf("%lf %lf", &num1, &num2);

        // Broadcast the numbers and operation to all processes
        MPI_Bcast(&num1, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
        MPI_Bcast(&num2, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);

        printf("Enter the operation (+, -, *, /): ");
        fflush(stdout);
        scanf(" %c", &operation);

        // Broadcast the operation to all processes
        MPI_Bcast(&operation, 1, MPI_CHAR, 0, MPI_COMM_WORLD);
    } else {
        // Other processes receive the numbers and operation
        MPI_Bcast(&num1, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
        MPI_Bcast(&num2, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
        MPI_Bcast(&operation, 1, MPI_CHAR, 0, MPI_COMM_WORLD);
    }

    
    switch (operation) {
        case '+':
            result = num1 + num2;
            break;
        case '-':
            result = num1 - num2;
            break;
        case '*':
            result = num1 * num2;
            break;
        case '/':
            // Check for division by zero
            if (num2 == 0 && rank == 0) {
                fprintf(stderr, "Error: Division by zero is undefined.\n");
                MPI_Abort(MPI_COMM_WORLD, 1);
            }

            // Broadcast the result of division to all processes
            MPI_Bcast(&result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);

            // If num2 is zero, other processes need to exit
            if (num2 == 0) {
                MPI_Finalize();
                return 0;
            }

            break;
        default:
            if (rank == 0) {
                fprintf(stderr, "Error: Invalid operation entered.\n");
            }
            MPI_Abort(MPI_COMM_WORLD, 1);
    }

    
    printf("Process %d result: %lf\n", rank, result);

    MPI_Finalize();
    return 0;
}
